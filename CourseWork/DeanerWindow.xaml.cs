using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Data.SQLite;
using System.Runtime.Remoting.Contexts;
using System.Data;
using System.Net.NetworkInformation;
using System.Text.RegularExpressions;
using System.ComponentModel;
using Course_work;
using System.Configuration;
using System.Diagnostics;
using System.Xml.Linq;
using CourseWork.Departament;
using System.Collections;
using System.Data.Entity.Infrastructure;

namespace CourseWork
{
    public partial class DeanerWindow : Window
    {
        Department Dep;
        bool mainJob;
        int ID;
        string first_name, second_name, middleName, workloadHours, subject, position, academicDegree, publicWork, login, role, password, connect = @" Data Source=DB.db", temp, temp2, temp3;

        private readonly List<string> positions = new List<string>
{
    "Лаборант",
    "Старший лаборант",
    "Профессор",
    "Доцент",
    "Старший преподаватель",
    "Научный сотрудник",
    "Ассистент-профессор" ,
    "Соискатель ученой степени",
    "Аспирант",
    "Докторант",
    "Без степени"
};

        private readonly List<string> academicDegrees = new List<string> //Ученая степень
{
    "Доктор технических наук",
    "Кандидат технических наук",
    "Доктор наук",         
    "Кандидат наук",      
    "Без степени"
};

        private readonly List<string> subjects = new List<string> //предмет
{
    "ИТ",
    "Лаборатория информатизации",
    "Технология программирования",
    "Программирование",
    "Базы данных",
    "Алгоритмы и структуры данных",
    "Искусственный интеллект",
    "Операционные системы",
    "Компьютерные сети",
    "Сопровождение программного обеспечения",
    "Веб-разработка",
    "Кибербезопасность","Схемотехника","Микропроцессорные системы"
};

        private readonly List<string> publicWorks = new List<string>
{"Заведующий кафедры", "Заместитель заведующего кафедрой",
          "Заместитель заведующего кафедрой по научной деятельности",
    "Член ученого совета",
    "Председатель методической комиссии",
    "Куратор студенческой группы",
    "Ответственный за профориентацию",
    "Член приемной комиссии",
    "Ответственный за практику",
    "Координатор международных программ",
    "Отсуствует"
};

        public DeanerWindow()
        {
           
            InitializeComponent();
            LoadComboBox();
            DataGridCategory.AutoGeneratedColumns += DataGridCategory_AutoGeneratedColumns;
            TextBox_Position.ItemsSource = positions;
            TextBox_Academic.ItemsSource = academicDegrees;
            TextBox_Dicipline.ItemsSource = subjects;
            TextBox_PublicWork.ItemsSource = publicWorks;

            TextBox_Position.SelectedIndex = 0;
            TextBox_Academic.SelectedIndex = 0;
            TextBox_Dicipline.SelectedIndex = 0;
            TextBox_PublicWork.SelectedIndex = 0;
            
            BoxClose();
        }

        private void DataGridCategory_AutoGeneratedColumns(object sender, EventArgs e)
        {

            Dictionary<string, string> columnTranslations = new Dictionary<string, string>
{
    { "FirstName", "Имя" },
    { "LastName", "Фамилия" },
    { "MiddleName", "Отчество" },
    { "Position", "Должность" },
    { "AcademicDegree", "Учёная степень" },
    { "Subjects", "Дисциплина" },
    { "WorkloadHours", "Часы нагрузки" },
    { "PublicWork", "Общественная работа" },
    { "MainJob", "Основное место работы" },
    { "Role", "Отделение" },
    { "Password", "Пароль" },{ "Login", "Логин" }
};



            foreach (var column in DataGridCategory.Columns)
            {
                if (columnTranslations.ContainsKey(column.Header.ToString()))
                {
                    column.Header = columnTranslations[column.Header.ToString()];
                }
            }
        
    }



        private void LoadComboBox()
        {
            string[] items = { "Состав кафедры","Учебный отдел", "Деканат" };
            CategoryComboBox.ItemsSource = items;
        }


        public void ClearComboBox()
        {
           
        }

        private void ButtonCategory_Click(object sender, RoutedEventArgs e)
        {
            if (CategoryComboBox.SelectedItem == null)
            {
                MessageBox.Show("Пожалуйста, выберите категорию");
                return;
            }

            temp2 = CategoryComboBox.SelectedItem.ToString();

            if (CategoryComboBox.Text == "Состав кафедры")
            {
                temp = "Departament";
                BoxClose();
                BoxOpenDepartament();
                LoadDataIntoComboBox(temp);
                LoadData(temp);
            }
            else if (CategoryComboBox.Text == "Учебный отдел")
            {
                temp = "StaffEducation";
                BoxClose();
                BoxOpenDeanerAndEducation();
                LoadDataIntoComboBox(temp);
                LoadData(temp);
            }
            else if (CategoryComboBox.Text == "Деканат")
            {
                temp = "Deaner";
                BoxClose();
                BoxOpenDeanerAndEducation();
                LoadDataIntoComboBox(temp);
                LoadData(temp);
            }
        }
        private void LoadDataIntoComboBox(string category)
        {
            string query = null;
            if (temp == "StaffEducation") {
                query = "SELECT ID, FirstName, LastName, MiddleName FROM Staff WHERE Role = 'Учебный отдел'";

            }
            if (temp == "Departament")
            {
                query = "SELECT ID, FirstName, LastName, MiddleName FROM Departament";
            }
            if (temp == "Deaner")
            {
                query = "SELECT ID, FirstName, LastName, MiddleName FROM Staff WHERE Role = 'Деканат'";
            }





            using (SQLiteConnection connection = new SQLiteConnection(connect))
                {
                    connection.Open();

                    using (SQLiteCommand command = new SQLiteCommand(query, connection))
                    {
                        combox1.Items.Clear(); // Очищаем перед заполнением

                        using (SQLiteDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                
                                    // Получаем ID (обрабатываем случай, когда ID может быть NULL)
                                    int id = reader.IsDBNull(reader.GetOrdinal("ID")) ? -1 : reader.GetInt32(reader.GetOrdinal("ID"));

                                    // Получаем имя и фамилию
                                    string firstName = reader.IsDBNull(reader.GetOrdinal("FirstName")) ? "" : reader["FirstName"].ToString();
                                    string lastName = reader.IsDBNull(reader.GetOrdinal("LastName")) ? "" : reader["LastName"].ToString();

                                    // Получаем отчество (может быть NULL)
                                    string middleInitial = "";
                                    if (!reader.IsDBNull(reader.GetOrdinal("MiddleName")))
                                    {
                                        string middleName = reader["MiddleName"].ToString();
                                        if (!string.IsNullOrEmpty(middleName))
                                        {
                                            middleInitial = $" {middleName[0]}.";
                                        }
                                    }

                                    // Формируем строку для ComboBox
                                    string displayText;
                                    if (!string.IsNullOrEmpty(firstName) && !string.IsNullOrEmpty(lastName))
                                    {
                                        displayText = $"{lastName} {firstName[0]}.{middleInitial}";
                                        if (id != -1)
                                        {
                                            displayText += $" [{id}]";
                                        }
                                        combox1.Items.Add(displayText);
                                    }
                                
                                
                            }
                        }
                    
                }
            }

        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (combox1.SelectedItem == null)
            {
                MessageBox.Show("Пожалуйста, выберите сотрудника для удаления");
                return;
            }

            try
            {
                id(); // Получаем ID из выбранного элемента

                if (ID <= 0)
                {
                    MessageBox.Show("Не удалось определить ID сотрудника");
                    return;
                }

                if (temp == "StaffEducation")
                {
                    EducationalDepartament.DeleteById(ID);
                }
                else if (temp == "Departament")
                {
                    Department.DeleteById(ID);
                }
                else if (temp == "Deaner")
                {
                    DeanerDepartament.DeleteById(ID);
                }

                MessageBox.Show("Сотрудник успешно удален");
                ClearComboBox();
                LoadData(temp);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при удалении: {ex.Message}");
            }
        }






        private void Button_Click_Departament(object sender, RoutedEventArgs e)
        {
            NewDepartament Window = new NewDepartament();
            Window.Show();
            ClearComboBox();
        }

        private void Button_Click_Education(object sender, RoutedEventArgs e)
        {
            NewEducationDepartament Window = new NewEducationDepartament();
            Window.Show();
            ClearComboBox();
        }

        private void Button_Click_Deaner(object sender, RoutedEventArgs e)
        {
            NewDeaner Window = new NewDeaner();
            Window.Show();
            ClearComboBox();
        }


        private void ButtonSelect_Click(object sender, RoutedEventArgs e)
        {
            if (combox1.SelectedItem == null)
            {
                MessageBox.Show("Пожалуйста, выберите сотрудника");
                return;
            }

            try
            {
                id(); // Получаем ID из выбранного элемента

                if (ID <= 0)
                {
                    MessageBox.Show("Не удалось определить ID сотрудника");
                    return;
                }

                // Загружаем данные пользователя
                LoadUser(temp);
                FirstNameTextBlock.Text = first_name;
                SecondNameTextBlock.Text = second_name;
                MiddleName.Text = middleName;

                if (temp == "Departament")
                {
                    Hours.Text = workloadHours.ToString();
                    TextBox_Position.Text = position;
                    TextBox_Academic.Text = academicDegree;
                    TextBox_PublicWork.Text = publicWork;
                    TextBox_Dicipline.Text = subject;
                    CheckBox1.IsChecked = mainJob;
                    Department Dep = new Department(first_name, second_name, middleName, position, academicDegree, subject, Convert.ToInt32(workloadHours), publicWork, mainJob);
                }
                else
                {
                    TextBox_Login.Text = login;
                    TextBox_Password.Text = password;

                    TextBox_Position.Visibility = Visibility.Collapsed;
                    TextBox_Academic.Visibility = Visibility.Collapsed;
                    TextBox_PublicWork.Visibility = Visibility.Collapsed;
                    TextBox_Login.Visibility = Visibility.Visible;
                    TextBox_Password.Visibility = Visibility.Visible;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при загрузке данных: {ex.Message}");
            }
        }

        private void SearchData(string searchText)
        {
            if (string.IsNullOrWhiteSpace(temp))
            {
                MessageBox.Show("Сначала выберите категорию");
                return;
            }

            if (string.IsNullOrWhiteSpace(searchText))
            {
                LoadData(temp);
                LoadDataIntoComboBox(temp);
                return;
            }

            try
            {
                string query = "";
                SQLiteParameter searchParam = new SQLiteParameter("@search", $"%{searchText}%");

                if (temp == "Departament")
                {
                    query = @"SELECT * FROM Departament 
                    WHERE FirstName COLLATE NOCASE LIKE @search
                    OR LastName COLLATE NOCASE LIKE @search
                    OR MiddleName COLLATE NOCASE LIKE @search";
                }
                else if (temp == "StaffEducation" || temp == "Deaner")
                {
                    query = @"SELECT ID, FirstName, LastName, MiddleName FROM Staff 
                    WHERE Role = @role
                    AND (FirstName COLLATE NOCASE LIKE @search
                    OR LastName COLLATE NOCASE LIKE @search
                    OR MiddleName COLLATE NOCASE LIKE @search)";
                }

                // Обновляем DataGrid
                using (SQLiteConnection connection = new SQLiteConnection(connect))
                {
                    connection.Open();
                    using (SQLiteCommand command = new SQLiteCommand(query, connection))
                    {
                        command.Parameters.Add(searchParam);

                        if (temp == "StaffEducation" || temp == "Deaner")
                        {
                            command.Parameters.AddWithValue("@role", temp == "StaffEducation" ? "Учебный отдел" : "Деканат");
                        }

                        SQLiteDataAdapter adapter = new SQLiteDataAdapter(command);
                        DataTable dataTable = new DataTable();
                        adapter.Fill(dataTable);
                        DataGridCategory.ItemsSource = dataTable.DefaultView;
                    }
                }

                // Обновляем ComboBox только найденными людьми
                UpdateComboBoxWithSearchResults(searchText);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при поиске: {ex.Message}");
                LoadData(temp);
                LoadDataIntoComboBox(temp);
            }
        }

        private void UpdateComboBoxWithSearchResults(string searchText)
        {
            combox1.Items.Clear();

            if (DataGridCategory.ItemsSource is DataView dataView)
            {
                foreach (DataRowView row in dataView)
                {
                    int id = row["ID"] != DBNull.Value ? Convert.ToInt32(row["ID"]) : -1;
                    string firstName = row["FirstName"]?.ToString() ?? "";
                    string lastName = row["LastName"]?.ToString() ?? "";
                    string middleName = row["MiddleName"]?.ToString() ?? "";

                    string middleInitial = "";
                    if (!string.IsNullOrEmpty(middleName))
                    {
                        middleInitial = $" {middleName[0]}.";
                    }

                    if (!string.IsNullOrEmpty(firstName) && !string.IsNullOrEmpty(lastName))
                    {
                        string displayText = $"{lastName} {firstName[0]}.{middleInitial}";
                        if (id != -1)
                        {
                            displayText += $" [{id}]";
                        }
                        combox1.Items.Add(displayText);
                    }
                }
            }
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {



            SearchData(Search.Text.Trim());
        }

        private void ResetSearchButton_Click(object sender, RoutedEventArgs e)
        {
            if (temp != null)
            {
                Search.Text = string.Empty;
                LoadData(temp);
                LoadDataIntoComboBox(temp);
            }

        }

        private void SearchTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                SearchButton_Click(sender, e);
            }
        }

        public void id() // Выбор id пользователя
        {
            if (string.IsNullOrEmpty(combox1.Text))
            {
                ID = 0;
                return;
            }

            Match match = Regex.Match(combox1.Text, @"\[(\d+)\]");
            if (match.Success)
            {
                ID = Convert.ToInt32(match.Groups[1].Value);
            }
            else
            {
                ID = 0;
            }
        }




        private void CloseButton_MouseDown(object sender, MouseButtonEventArgs e)
        {
            System.Diagnostics.Process.GetCurrentProcess().Kill();
        }

        private void MinButton_MouseDown(object sender, MouseButtonEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }
        private void ToolBar_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
            {
                this.DragMove();
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if (combox1.SelectedItem == null)
            {
                MessageBox.Show("Пожалуйста, выберите сотрудника для обновления");
                return;
            }

            try
            {
                if (temp == "Departament")
                {
                    Department department = new Department(
                        FirstNameTextBlock.Text,
                        SecondNameTextBlock.Text,
                        MiddleName.Text,
                        TextBox_Position.Text,
                        TextBox_Academic.Text,
                        TextBox_Dicipline.Text,
                        Convert.ToInt32(Hours.Text),
                        TextBox_PublicWork.Text,
                        CheckBox1.IsChecked.GetValueOrDefault()
                    );

                    if (!ValidateDepartmentData(department))
                    {
                        return;
                    }

                    department.Update(ID);
                }
                else if (temp == "StaffEducation")
                {
                    EducationalDepartament education = new EducationalDepartament(
                        FirstNameTextBlock.Text,
                        SecondNameTextBlock.Text,
                        MiddleName.Text,
                        TextBox_Login.Text,
                        TextBox_Password.Text
                    );

                    if (!ValidateEducationData(education))
                    {
                        return;
                    }

                    education.Update(ID);
                }
                else if (temp == "Deaner")
                {
                    DeanerDepartament deaner = new DeanerDepartament(
                        FirstNameTextBlock.Text,
                        SecondNameTextBlock.Text,
                        MiddleName.Text,
                        TextBox_Login.Text,
                        TextBox_Password.Text
                    );

                    if (!ValidateStaffData(deaner))
                    {
                        return;
                    }

                    deaner.Update(ID);
                }

                MessageBox.Show("Данные успешно обновлены");
                LoadData(temp);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при обновлении данных: {ex.Message}");
            }
        }
        private bool ValidateDepartmentData(Department department)
        {
            if (!ValidateCommonPersonData(department))
            {
                return false;
            }

            if (string.IsNullOrEmpty(department.Position))
            {
                MessageBox.Show("Поле должности не может быть пустым.");
                return false;
            }

            if (department.WorkloadHours <= 0)
            {
                MessageBox.Show("Некорректное значение часов нагрузки.");
                return false;
            }

            return true;
        }

        // Валидация для EducationalDepartament
        private bool ValidateEducationData(EducationalDepartament education)
        {
            if (!ValidateCommonPersonData(education))
            {
                return false;
            }

            if (string.IsNullOrEmpty(education.Login))
            {
                MessageBox.Show("Поле логина не может быть пустым.");
                return false;
            }

            if (string.IsNullOrEmpty(education.Password))
            {
                MessageBox.Show("Поле пароля не может быть пустым.");
                return false;
            }

            if (education.Password.Length < 6 || education.Password.Length > 6)
            {
                MessageBox.Show("Пароль должен содержать минимум 6 символов.");
                return false;
            }
            if (education.Password.Length > 15)
            {
                MessageBox.Show("Пароль не должен превышать значение 15 символов.");
                return false;
            }

            return true;
        }

        // Валидация для Staff (Deaner)
        private bool ValidateStaffData(DeanerDepartament staff)
        {
            if (!ValidateCommonPersonData(staff))
            {
                return false;
            }

            if (string.IsNullOrEmpty(staff.Login))
            {
                MessageBox.Show("Поле логина не может быть пустым.");
                return false;
            }

            if (string.IsNullOrEmpty(staff.Password))
            {
                MessageBox.Show("Поле пароля не может быть пустым.");
                return false;
            }

            if (staff.Password.Length < 6)
            {
                MessageBox.Show("Пароль должен содержать минимум 6 символов.");
                return false;
            }

            return true;
        }

        // Общая валидация для всех типов (ФИО)
        private bool ValidateCommonPersonData(dynamic person)
        {
            if (string.IsNullOrEmpty(person.FirstName))
            {
                MessageBox.Show("Поле имени не может быть пустым.");
                return false;
            }

            if (person.FirstName.Length > 16 || !Regex.IsMatch(person.FirstName, @"^[а-яА-ЯЁё]+$"))
            {
                MessageBox.Show("Имя должно быть на русском, без цифр и спецсимволов (макс. 16 символов).");
                return false;
            }

            if (string.IsNullOrEmpty(person.LastName))
            {
                MessageBox.Show("Поле фамилии не может быть пустым.");
                return false;
            }

            if (person.LastName.Length > 16 || !Regex.IsMatch(person.LastName, @"^[а-яА-ЯЁё]+$"))
            {
                MessageBox.Show("Фамилия должна быть на русском, без цифр и спецсимволов (макс. 16 символов).");
                return false;
            }

            if (!string.IsNullOrEmpty(person.MiddleName) &&
                (person.MiddleName.Length > 16 || !Regex.IsMatch(person.MiddleName, @"^[а-яА-ЯЁё]+$")))
            {
                MessageBox.Show("Отчество должно быть на русском, без цифр и спецсимволов (макс. 16 символов).");
                return false;
            }

            return true;
        }






        private void LoadUser(string category)
        {
            string query=null;
            if (temp == "Departament") {  query = @"SELECT 
                    ID, 
                    FirstName, 
                    LastName, 
                    MiddleName, 
                    Position, 
                    AcademicDegree, 
                    Subjects, 
                    WorkloadHours, 
                    PublicWork, 
                    MainJob 
                FROM Departament 
                WHERE ID = @ID"; }
            if (temp == "StaffEducation") {  query = @"SELECT 
                    ID, 
                    FirstName, 
                    LastName, 
                    MiddleName, 
                    Login, 
                    Password, 
                    Role
               
                FROM Staff 
                WHERE ID = @ID"; }
            if (temp == "Deaner") { query = @"SELECT 
                    ID, 
                    FirstName, 
                    LastName, 
                    MiddleName, 
                    Login, 
                    Password, 
                    Role
               
                FROM Staff 
                WHERE ID = @ID"; }


            using (SQLiteConnection connection = new SQLiteConnection(connect))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ID", ID);

                    using (SQLiteDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {if (temp == "Departament")
                            {
                                first_name = reader["FirstName"].ToString();
                                second_name = reader["LastName"].ToString();
                                middleName = reader["MiddleName"].ToString();
                                position = reader["Position"].ToString();
                                academicDegree = reader["AcademicDegree"].ToString();
                                subject = reader["Subjects"].ToString();
                                workloadHours = reader["WorkloadHours"].ToString();
                                publicWork = reader["PublicWork"].ToString();
                                mainJob = !reader.IsDBNull(reader.GetOrdinal("MainJob")) &&
                                         Convert.ToBoolean(reader["MainJob"]);
                            }
                            else
                            {
                                first_name = reader["FirstName"].ToString();
                                second_name = reader["LastName"].ToString();
                                middleName = reader["MiddleName"].ToString();
                                login = reader["Login"].ToString();
                                password = reader["Password"].ToString();
                                role = reader["Role"].ToString();
                                
                            }
                                
                            


                         
                        }

                    }
                }
            }
        }
        public void BoxClose()
        {
            SecondNameTextBlock.Visibility= FirstNameTextBlock.Visibility = TextBox_Login.Visibility = TextBox_Password.Visibility =  FirstNameTextBlock.Visibility= TextBox_Position.Visibility= TextBox_Academic .Visibility= Hours .Visibility= CheckBox1.Visibility= TextBox_Dicipline.Visibility= TextBox_PublicWork.Visibility= MiddleName.Visibility= Visibility.Collapsed;
            lable_name.Visibility = lable_family.Visibility = lable_middle.Visibility = lable_position.Visibility = label_academic.Visibility = lable_publickwork.Visibility = lable_hours.Visibility = lable_dicipline.Visibility = lable_secondwork.Visibility = Visibility.Collapsed;
        }
        public void BoxOpenDepartament()
        {
            SecondNameTextBlock.Visibility  = FirstNameTextBlock.Visibility = TextBox_Position.Visibility = TextBox_Academic.Visibility = Hours.Visibility = CheckBox1.Visibility = TextBox_Dicipline.Visibility = TextBox_PublicWork.Visibility = MiddleName.Visibility = Visibility.Visible;
            lable_name.Visibility = lable_family.Visibility = lable_middle.Visibility = lable_position.Visibility = label_academic.Visibility = lable_publickwork.Visibility = lable_hours.Visibility = lable_dicipline.Visibility = lable_secondwork.Visibility = Visibility.Visible;
        lable_login.Visibility=lable_password.Visibility=Visibility.Collapsed;
        }
        public void BoxOpenDeanerAndEducation()
        {
            lable_login.Visibility = lable_password.Visibility = lable_name.Visibility = lable_family.Visibility = lable_middle.Visibility = Visibility.Visible;
            TextBox_Login.Visibility = TextBox_Password.Visibility  = SecondNameTextBlock.Visibility  = FirstNameTextBlock.Visibility =  MiddleName.Visibility = Visibility.Visible;
            lable_position.Visibility = label_academic.Visibility = lable_publickwork.Visibility = lable_hours.Visibility = lable_dicipline.Visibility = lable_secondwork.Visibility = Visibility.Collapsed;
        }



        private void LoadData(string temp)
        {
            string query = null;
            if (temp == "Departament") {query = $"SELECT * FROM {temp}"; }
            if (temp == "StaffEducation") { query = "SELECT ID, FirstName, LastName, MiddleName, Role, Login, Password FROM Staff WHERE Role = 'Учебный отдел'"; }
            if (temp == "Deaner")
            {
                query = "SELECT ID, FirstName, LastName, MiddleName, Role, Login, Password FROM Staff WHERE Role = 'Деканат'";
            }

            using (SQLiteConnection connection = new SQLiteConnection(connect))
            {
                connection.Open();
                SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, connection);
                DataTable dataTable = new DataTable();
                adapter.Fill(dataTable);
                DataGridCategory.ItemsSource = dataTable.DefaultView;
                connection.Close();
            }

        }
    }
}