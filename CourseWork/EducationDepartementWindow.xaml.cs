using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Course_work;
using CourseWork.Departament;

namespace CourseWork
{
    public partial class EducationDepartementWindow : Window
    {
        Department Dep;
        bool mainJob;
        int ID;
        string first_name, second_name, middleName, workloadHours, subject, position, academicDegree, publicWork, login, password, connect = @"Data Source=DB.db", temp, temp2, temp3;

        private readonly List<string> positions = new List<string>
{
    "Лаборант",
    "Старший лаборант",
    "Профессор",
    "Доцент",
    "Старший преподаватель",
    "Научный сотрудник",
    "Ассистент-профессор" ,
    "Соискатель ученой степени",
    "Аспирант",
    "Докторант",
    "Без степени"
};

        private readonly List<string> academicDegrees = new List<string> //Ученая степень
{
    "Доктор технических наук",
    "Кандидат технических наук",
    "Доктор наук",          
    "Кандидат наук",       
    "Без степени"
};

        private readonly List<string> subjects = new List<string> //предмет
{
    "ИТ",
    "Лаборатория информатизации",
    "Технология программирования",
    "Программирование",
    "Базы данных",
    "Алгоритмы и структуры данных",
    "Искусственный интеллект",
    "Операционные системы",
    "Компьютерные сети",
    "Сопровождение программного обеспечения",
    "Веб-разработка",
    "Кибербезопасность","Схемотехника","Микропроцессорные системы"
};

        private readonly List<string> publicWorks = new List<string>
{"Заведующий кафедры", "Заместитель заведующего кафедрой",
          "Заместитель заведующего кафедрой по научной деятельности",
    "Член ученого совета",
    "Председатель методической комиссии",
    "Куратор студенческой группы",
    "Ответственный за профориентацию",
    "Член приемной комиссии",
    "Ответственный за практику",
    "Координатор международных программ",
    "Отсуствует"
};

        public EducationDepartementWindow()
        {
            InitializeComponent();
            LoadComboBox();
            DataGridCategory.AutoGeneratedColumns += DataGridCategory_AutoGeneratedColumns;
            TextBox_Position.ItemsSource = positions;
            TextBox_Academic.ItemsSource = academicDegrees;
            TextBox_Dicipline.ItemsSource = subjects;
            TextBox_PublicWork.ItemsSource = publicWorks;

            TextBox_Position.SelectedIndex = 0;
            TextBox_Academic.SelectedIndex = 0;
            TextBox_Dicipline.SelectedIndex = 0;
            TextBox_PublicWork.SelectedIndex = 0;
        }

        private void DataGridCategory_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Dictionary<string, string> columnTranslations = new Dictionary<string, string>
            {
                { "FirstName", "Имя" },
                { "LastName", "Фамилия" },
                { "MiddleName", "Отчество" },
                { "Position", "Должность" },
                { "AcademicDegree", "Учёная степень" },
                { "Subjects", "Дисциплина" },
                { "WorkloadHours", "Часы нагрузки" },
                { "PublicWork", "Общественная работа" },
                { "MainJob", "Основное место работы" }
            };

            foreach (var column in DataGridCategory.Columns)
            {
                if (columnTranslations.ContainsKey(column.Header.ToString()))
                {
                    column.Header = columnTranslations[column.Header.ToString()];
                }
            }
        }

        private void LoadComboBox()
        {
            string[] items = { "Состав кафедры", "Учебный отдел", "Деканат" };
            CategoryComboBox.ItemsSource = items;
        }

        private void SearchTextBox(object sender, RoutedEventArgs e)
        {

        }

        private void SearchData(string searchText)
        {
            if (string.IsNullOrWhiteSpace(temp))
            {
                MessageBox.Show("Сначала выберите категорию");
                return;
            }

            if (string.IsNullOrWhiteSpace(searchText))
            {
                LoadData(temp);
                LoadDataIntoComboBox(temp);
                return;
            }

            try
            {
                string query = "";
                SQLiteParameter searchParam = new SQLiteParameter("@search", $"%{searchText}%");

                if (temp == "Departament")
                {
                    query = @"SELECT * FROM Departament 
                    WHERE FirstName COLLATE NOCASE LIKE @search
                    OR LastName COLLATE NOCASE LIKE @search
                    OR MiddleName COLLATE NOCASE LIKE @search";
                }
                else if (temp == "StaffEducation" || temp == "Deaner")
                {
                    query = @"SELECT ID, FirstName, LastName, MiddleName FROM Staff 
                    WHERE Role = @role
                    AND (FirstName COLLATE NOCASE LIKE @search
                    OR LastName COLLATE NOCASE LIKE @search
                    OR MiddleName COLLATE NOCASE LIKE @search)";
                }

                // Обновляем DataGrid
                using (SQLiteConnection connection = new SQLiteConnection(connect))
                {
                    connection.Open();
                    using (SQLiteCommand command = new SQLiteCommand(query, connection))
                    {
                        command.Parameters.Add(searchParam);

                        if (temp == "StaffEducation" || temp == "Deaner")
                        {
                            command.Parameters.AddWithValue("@role", temp == "StaffEducation" ? "Учебный отдел" : "Деканат");
                        }

                        SQLiteDataAdapter adapter = new SQLiteDataAdapter(command);
                        DataTable dataTable = new DataTable();
                        adapter.Fill(dataTable);
                        DataGridCategory.ItemsSource = dataTable.DefaultView;
                    }
                }

                // Обновляем ComboBox только найденными людьми
                UpdateComboBoxWithSearchResults(searchText);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при поиске: {ex.Message}");
                LoadData(temp);
                LoadDataIntoComboBox(temp);
            }
        }

        private void UpdateComboBoxWithSearchResults(string searchText)
        {
            combox1.Items.Clear();

            if (DataGridCategory.ItemsSource is DataView dataView)
            {
                foreach (DataRowView row in dataView)
                {
                    int id = row["ID"] != DBNull.Value ? Convert.ToInt32(row["ID"]) : -1;
                    string firstName = row["FirstName"]?.ToString() ?? "";
                    string lastName = row["LastName"]?.ToString() ?? "";
                    string middleName = row["MiddleName"]?.ToString() ?? "";

                    string middleInitial = "";
                    if (!string.IsNullOrEmpty(middleName))
                    {
                        middleInitial = $" {middleName[0]}.";
                    }

                    if (!string.IsNullOrEmpty(firstName) && !string.IsNullOrEmpty(lastName))
                    {
                        string displayText = $"{lastName} {firstName[0]}.{middleInitial}";
                        if (id != -1)
                        {
                            displayText += $" [{id}]";
                        }
                        combox1.Items.Add(displayText);
                    }
                }
            }
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            


            SearchData(Search.Text.Trim());
        }

        private void ResetSearchButton_Click(object sender, RoutedEventArgs e)
        {
            if (temp != null) {
                Search.Text = string.Empty;
                LoadData(temp);
                LoadDataIntoComboBox(temp);
            }

        }

        private void SearchTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                SearchButton_Click(sender, e);
            }
        }

        private void SearchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void ButtonCategory_Click(object sender, RoutedEventArgs e)
        {
            if (CategoryComboBox.SelectedItem == null)
            {
                MessageBox.Show("Пожалуйста, выберите категорию");
                return;
            }

            temp2 = CategoryComboBox.SelectedItem.ToString();

            if (CategoryComboBox.Text == "Состав кафедры")
            {
                temp = "Departament";

                LoadDataIntoComboBox(temp);
                LoadData(temp);
                DeleteButton.IsEnabled = true;
                Button_Complect.IsEnabled = true;
                ButtonSelect.IsEnabled = true;


            }
            else if (CategoryComboBox.Text == "Учебный отдел")
            {
                temp = "StaffEducation";

                LoadDataIntoComboBox(temp);
                LoadData(temp);
                DeleteButton.IsEnabled = false;
                Button_Complect.IsEnabled = false;
                ButtonSelect.IsEnabled = false;

            }
            else if (CategoryComboBox.Text == "Деканат")
            {
                temp = "Deaner";

                LoadDataIntoComboBox(temp);
                LoadData(temp);
                DeleteButton.IsEnabled = false;
                Button_Complect.IsEnabled = false;
                ButtonSelect.IsEnabled = false;
            }
            temp2 = CategoryComboBox.SelectedItem.ToString();
            if (CategoryComboBox.Text == "Состав кафедры") ;
        }

        private void LoadDataIntoComboBox(string category)
        {
            string query = null;
            if (temp == "StaffEducation")
            {
                query = "SELECT ID, FirstName, LastName, MiddleName FROM Staff WHERE Role = 'Учебный отдел'";

            }
            if (temp == "Departament")
            {
                query = "SELECT ID, FirstName, LastName, MiddleName FROM Departament";
            }
            if (temp == "Deaner")
            {
                query = "SELECT ID, FirstName, LastName, MiddleName FROM Staff WHERE Role = 'Деканат'";
            }

            using (SQLiteConnection connection = new SQLiteConnection(connect))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(query, connection))
                {
                    combox1.Items.Clear();

                    using (SQLiteDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            int id = reader.IsDBNull(reader.GetOrdinal("ID")) ? -1 : reader.GetInt32(reader.GetOrdinal("ID"));
                            string firstName = reader.IsDBNull(reader.GetOrdinal("FirstName")) ? "" : reader["FirstName"].ToString();
                            string lastName = reader.IsDBNull(reader.GetOrdinal("LastName")) ? "" : reader["LastName"].ToString();

                            string middleInitial = "";
                            if (!reader.IsDBNull(reader.GetOrdinal("MiddleName")))
                            {
                                string middleName = reader["MiddleName"].ToString();
                                if (!string.IsNullOrEmpty(middleName))
                                {
                                    middleInitial = $" {middleName[0]}.";
                                }
                            }

                            string displayText;
                            if (!string.IsNullOrEmpty(firstName) && !string.IsNullOrEmpty(lastName))
                            {
                                displayText = $"{lastName} {firstName[0]}.{middleInitial}";
                                if (id != -1)
                                {
                                    displayText += $" [{id}]";
                                }
                                combox1.Items.Add(displayText);
                            }
                        }
                    }
                }
            }
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (combox1.SelectedItem == null)
            {
                MessageBox.Show("Пожалуйста, выберите сотрудника для удаления.");
                return;
            }

            id();
            Department.DeleteById(ID);
            LoadData(temp);
        }

        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            NewDepartament Window = new NewDepartament();
            Window.Show();
        }

        private void ButtonSelect_Click(object sender, RoutedEventArgs e)
        {
            if (combox1.SelectedItem == null)
            {
                MessageBox.Show("Пожалуйста, выберите сотрудника.");
                return;
            }

            id();
            LoadUser(temp);

            FirstNameTextBlock.Text = first_name;
            SecondNameTextBlock.Text = second_name;
            MiddleName.Text = middleName;
            Hours.Text = workloadHours.ToString();
            TextBox_Position.Text = position;
            TextBox_Academic.Text = academicDegree;
            TextBox_PublicWork.Text = publicWork;
            TextBox_Dicipline.Text = subject;
            CheckBox1.IsChecked = mainJob;
            Dep = new Department(first_name, second_name, middleName, position, academicDegree, subject, Convert.ToInt32(workloadHours), publicWork, mainJob);
        }

        public void id()
        {
            Match match = Regex.Match(combox1.Text, @"\[(\d+)\]");
            if (match.Success)
            {
                ID = Convert.ToInt32(match.Groups[1].Value);
            }
            else
            {
                MessageBox.Show("Не удалось определить ID сотрудника.");
            }
        }

        private void CloseButton_MouseDown(object sender, MouseButtonEventArgs e)
        {
            System.Diagnostics.Process.GetCurrentProcess().Kill();
        }

        private void MinButton_MouseDown(object sender, MouseButtonEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void ToolBar_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
            {
                this.DragMove();
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(FirstNameTextBlock.Text) ||
                    string.IsNullOrEmpty(SecondNameTextBlock.Text) ||
                    string.IsNullOrEmpty(Hours.Text))
                {
                    MessageBox.Show("Пожалуйста, заполните все обязательные поля.");
                    return;
                }

                Department department = new Department(
                    FirstNameTextBlock.Text,
                    SecondNameTextBlock.Text,
                    MiddleName.Text,
                    TextBox_Position.Text,
                    TextBox_Academic.Text,
                    TextBox_Dicipline.Text,
                    Convert.ToInt32(Hours.Text),
                    TextBox_PublicWork.Text,
                    CheckBox1.IsChecked.GetValueOrDefault()
                );

                if (!ValidateDepartmentData(department))
                {
                    return;
                }

                department.Update(ID);
                LoadData(temp);
                MessageBox.Show("Данные успешно обновлены.");
            }
            catch (FormatException)
            {
                MessageBox.Show("Некорректный формат числа в поле 'Часы'.");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Произошла ошибка: {ex.Message}");
            }
        }

        private bool ValidateDepartmentData(Department department)
        {
            if (string.IsNullOrEmpty(department.FirstName))
            {
                MessageBox.Show("Поле имени не может быть пустым.");
                return false;
            }

            if (department.FirstName.Length > 16 || !Regex.IsMatch(department.FirstName, @"^[а-яА-ЯЁё]+$"))
            {
                MessageBox.Show("Имя должно быть на русском, без цифр и спецсимволов (макс. 16 символов).");
                return false;
            }

            if (string.IsNullOrEmpty(department.LastName))
            {
                MessageBox.Show("Поле фамилии не может быть пустым.");
                return false;
            }

            if (department.LastName.Length > 16 || !Regex.IsMatch(department.LastName, @"^[а-яА-ЯЁё]+$"))
            {
                MessageBox.Show("Фамилия должна быть на русском, без цифр и спецсимволов (макс. 16 символов).");
                return false;
            }

            if (!string.IsNullOrEmpty(department.MiddleName) &&
                (department.MiddleName.Length > 16 || !Regex.IsMatch(department.MiddleName, @"^[а-яА-ЯЁё]+$")))
            {
                MessageBox.Show("Отчество должно быть на русском, без цифр и спецсимволов (макс. 16 символов).");
                return false;
            }

            if (string.IsNullOrEmpty(department.Position))
            {
                MessageBox.Show("Поле должности не может быть пустым.");
                return false;
            }

            if (department.WorkloadHours <= 0)
            {
                MessageBox.Show("Некорректное значение часов нагрузки.");
                return false;
            }

            return true;
        }

        private void LoadUser(string category)
        {
            if (temp != "Departament") return;

            string query = @"SELECT 
                    ID, 
                    FirstName, 
                    LastName, 
                    MiddleName, 
                    Position, 
                    AcademicDegree, 
                    Subjects, 
                    WorkloadHours, 
                    PublicWork, 
                    MainJob 
                FROM Departament 
                WHERE ID = @ID";

            using (SQLiteConnection connection = new SQLiteConnection(connect))
            {
                connection.Open();

                using (SQLiteCommand command = new SQLiteCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ID", ID);

                    using (SQLiteDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            first_name = reader["FirstName"].ToString();
                            second_name = reader["LastName"].ToString();
                            middleName = reader["MiddleName"].ToString();
                            position = reader["Position"].ToString();
                            academicDegree = reader["AcademicDegree"].ToString();
                            subject = reader["Subjects"].ToString();
                            workloadHours = reader["WorkloadHours"].ToString();
                            publicWork = reader["PublicWork"].ToString();
                            mainJob = !reader.IsDBNull(reader.GetOrdinal("MainJob")) &&
                                     Convert.ToBoolean(reader["MainJob"]);
                        }
                    }
                }
            }
        }

        private void LoadData(string temp)
        {

            string query = null;
            if (temp == "Departament") { query = $"SELECT * FROM {temp}"; }
            if (temp == "StaffEducation") { query = "SELECT ID, FirstName, LastName, MiddleName, Role, Login, Password FROM Staff WHERE Role = 'Учебный отдел'"; }
            if (temp == "Deaner")
            {
                query = "SELECT ID, FirstName, LastName, MiddleName, Role, Login, Password FROM Staff WHERE Role = 'Деканат'";
            }

            using (SQLiteConnection connection = new SQLiteConnection(connect))
            {
                connection.Open();
                SQLiteDataAdapter adapter = new SQLiteDataAdapter(query, connection);
                DataTable dataTable = new DataTable();
                adapter.Fill(dataTable);
                DataGridCategory.ItemsSource = dataTable.DefaultView;
                connection.Close();
            }
        }
    }
}